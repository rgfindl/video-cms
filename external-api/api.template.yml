AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: External API

Parameters:
  Environment:
    Type: String
    Description: Environment
    Default: 'prod'
  TLD:
    Type: String
    Description: TLD name needed by Route53 to perform DNS (example.com)
    Default: 'heyblue.io'
  Domain:
    Type: String
    Description: Domain name for your api (api.example.com)
    Default: 'api.heyblue.io'
  SSLArn:
    Type: String
    Description: 'Wildcard SSL ARN'
    Default: 'arn:aws:acm:us-east-1:813715622461:certificate/74dd21e7-9e93-44c5-b433-79f42f644558'
  IamStack:
    Type: String
    Description: The IAM stack name
    Default: 'heyblue-iam'
  DBStack:
    Type: String
    Description: The DB stack name
    Default: 'heyblue-db'
  AssetsStack:
    Type: String
    Description: The Assets stack name
    Default: 'heyblue-assets'
  QueueStack:
    Type: String
    Description: The Queue stack name
    Default: 'heyblue-queue'
  ElasticsearchIndex:
    Type: String
    Default: 'sharedv1'

Conditions:
  UseCustomDomain: !And
    - !Not [!Equals [!Ref TLD, '']]
    - !Not [!Equals [!Ref Domain, '']]
    - !Not [!Equals [!Ref SSLArn, '']]

Globals:
  Api:
    # enable CORS; to make more specific, change the origin wildcard
    # to a particular domain name, e.g. "'www.example.com'"
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Resources:

  ApiGatewayApi:
      Type: AWS::Serverless::Api
      Properties:
        StageName: !Ref Environment

        DefinitionBody:
          swagger: 2.0
          basePath: !Sub '/${Environment}'
          info:
            title: HeyBlue.io API
          schemes:
            - https
          paths:
            /:
              x-amazon-apigateway-any-method:
                produces:
                - application/json
                responses:
                  '200':
                    description: 200 response
                    schema:
                      $ref: "#/definitions/Empty"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: 200
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"

                  passthroughBehavior: when_no_match
                  httpMethod: POST
                  type: aws_proxy
            /{proxy+}:
              x-amazon-apigateway-any-method:
                produces:
                - application/json
                parameters:
                - name: proxy
                  in: path
                  required: true
                  type: string
                responses: {}
                x-amazon-apigateway-integration:
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
                  httpMethod: POST
                  type: aws_proxy
          definitions:
            Empty:
              type: object
              title: Empty Schema

  #
  # Our Lambda function.  Basic code has been added.  You will replace the code later via your Github repo.
  #
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Timeout: 5
      Role:
        Fn::ImportValue:
          !Sub "${IamStack}-IamRoleLambdaExecutionArn"
      CodeUri: ./
      Runtime: nodejs8.10
      Environment:
        Variables:
          ElasticsearchDomain:
            Fn::ImportValue:
              !Sub "${DBStack}-ElasticsearchDomain"
          ElasticsearchIndex: !Ref ElasticsearchIndex
          Table:
            Fn::ImportValue:
              !Sub "${DBStack}-Table"
          AssetsBucket:
            Fn::ImportValue:
              !Sub "${AssetsStack}-AssetsBucket"
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY

  #
  # CloudFront
  #
  ApiCloudFront:
    Type: 'AWS::CloudFront::Distribution'
    DependsOn: 
      - LambdaFunction
      - ApiGatewayApi
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref Domain
        Enabled: true
        PriceClass: 'PriceClass_All'
        HttpVersion: 'http2'
        Origins:
          - 
            Id: 'ApiGatewayApi'
            DomainName: !Sub '${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com'
            OriginPath: !Sub '/${Environment}'
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: 'https-only'
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          CachedMethods:
            - HEAD
            - GET
            - OPTIONS
          TargetOriginId: 'ApiGatewayApi'
          ForwardedValues:
            QueryString: 'true'
            Cookies:
              Forward: none
            Headers:
              - 'Origin'
              - 'Access-Control-Request-Headers'
              - 'Access-Control-Request-Method'
          ViewerProtocolPolicy: !If [UseCustomDomain, "redirect-to-https", "allow-all"]
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
        Restrictions:
          GeoRestriction:
            RestrictionType: none
        ViewerCertificate:
          SslSupportMethod: !If [UseCustomDomain, "sni-only", !Ref "AWS::NoValue"]
          MinimumProtocolVersion: !If [UseCustomDomain, "TLSv1", !Ref "AWS::NoValue"]
          AcmCertificateArn: !If [UseCustomDomain, !Ref SSLArn, !Ref "AWS::NoValue"]
          CloudFrontDefaultCertificate: !If [UseCustomDomain, !Ref "AWS::NoValue", true]

  #
  # Route53 DNS record set to map our domain to our CDN
  #
  DomainDNS:
    Type: AWS::Route53::RecordSetGroup
    Condition: UseCustomDomain
    Properties:
      HostedZoneName: !Sub '${TLD}.'
      RecordSets:
        -
          Name: !Ref Domain
          Type: 'A'
          AliasTarget:
            HostedZoneId: 'Z2FDTNDATAQYW2' # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
            DNSName: !GetAtt ApiCloudFront.DomainName

Outputs:
  LambdaFunction:
    Description: Lambda Function
    Value: !Ref LambdaFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunction'

  ApiUrl:
    Value: !GetAtt ApiCloudFront.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  ApiUrlCustom:
    Description: URL of your API endpoint
    Condition: UseCustomDomain
    Value: !Sub 'https://${Domain}'
    Export:
      Name: !Sub '${AWS::StackName}-API-Custom'